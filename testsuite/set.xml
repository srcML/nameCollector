<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" url="src/">

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="test_set.cpp" hash="34ec4fedd6c0db19d102d029d31e16f6720cc4d0"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_set.hpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<constructor><name><name>Set</name><operator>::</operator><name>Set</name></name><parameter_list>()</parameter_list> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></constructor>

<constructor><name><name>Set</name><operator>::</operator><name>Set</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>Set</name><argument_list>()</argument_list></call> </member_init_list><block>{<block_content>
    <expr_stmt><expr><name><name>member</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
</block_content>}</block></constructor>

<function><type><name>unsigned</name> <name>int</name></type> <name><name>Set</name><operator>::</operator><name>cardinality</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>card</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>++</operator><name>card</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>card</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>Set</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>+</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>Set</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>Set</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>*</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>Set</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>Set</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>-</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>Set</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>Set</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>~</name></name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <decl_stmt><decl><type><name>Set</name></type> <name>result</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><name><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>bool</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>==</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>bool</name></type> <name><name>Set</name><operator>::</operator><name>operator<name>&lt;=</name></name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<block_content>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>member</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"set( "</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COLLECTION_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><name><name>rhs</name><operator>.</operator><name>member</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>rhs</name> <operator>&gt;</operator> <name>lhs</name></expr>;</return>
</block_content>}</block></function>
<function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>rhs</name> <operator>&lt;=</operator> <name>lhs</name></expr>;</return>
</block_content>}</block></function>
<function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>&lt;=</operator> <name>rhs</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="test_set.hpp" hash="d69ede479064a9957a2bfd1d21876fcd4caf70cb"><cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NAMECOLLECTOR_SET_HPP_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMECOLLECTOR_SET_HPP_</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>COLLECTION_SIZE</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>


<class>class <name>Set</name> <block>{<private type="default">
</private><public>public:
    <constructor_decl><name>Set</name><parameter_list>()</parameter_list>;</constructor_decl>
    <constructor_decl><name>Set</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</constructor_decl>

    <function_decl><type><name>unsigned</name> <name>int</name></type> <name>cardinality</name> <parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl type="operator"><type><name>bool</name></type> <name>operator<name>[]</name></name> <parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl type="operator"><type><name>Set</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl type="operator"><type><name>Set</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl type="operator"><type><name>Set</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl type="operator"><type><name>Set</name></type> <name>operator<name>~</name></name><parameter_list>()</parameter_list> <specifier>const</specifier>;</function_decl>

    <function_decl type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>
    <function_decl type="operator"><type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <specifier>const</specifier>;</function_decl>

    <friend>friend <function_decl type="operator"><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl></friend>

</public><private>private:
    <decl_stmt><decl><type><name>bool</name></type> <name><name>member</name><index>[<expr><name>COLLECTION_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
</private>}</block>;</class>


<function_decl type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Set</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>



<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>

<unit xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++" filename="test_set_main.cpp" hash="e1719eaf257b2c66e5aa5267ff855c4af8d82673"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_set.hpp"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>Set</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Set</name></type> <name>y</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>~</operator><name>x</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>~</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>y</name> <operator>+</operator> <operator>~</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>y</name> <operator>*</operator> <operator>~</operator><name>y</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Set</name></type> <name>z</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Set</name></type> <name>a</name> <init>= <expr><name>y</name> <operator>+</operator> <name>z</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>

</unit>
